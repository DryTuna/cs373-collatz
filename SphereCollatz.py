#!/usr/bin/env python

# ---------------------------
# projects/collatz/Collatz.py
# Copyright (C) 2012
# Duy Tran
# ---------------------------

cycle_cache = [179, 182, 217, 238, 215, 236, 262, 252, 247, 
260, 268, 250, 263, 276, 271, 271, 266, 279, 
261, 274, 256, 269, 269, 282, 264, 264, 308, 
259, 259, 272, 272, 285, 267, 267, 311, 324, 
249, 306, 244, 306, 288, 257, 288, 270, 270, 
314, 283, 314, 296, 296, 278, 309, 340, 322, 
260, 260, 322, 304, 273, 304, 335, 317, 286, 
330, 299, 268, 268, 312, 312, 299, 312, 325, 
263, 294, 325, 307, 307, 351, 338, 307, 320, 
320, 320, 289, 320, 302, 302, 333, 333, 315, 
315, 333, 315, 284, 315, 328, 297, 297, 284, 
328, 341, 310, 310, 248, 310, 341, 354, 292, 
279, 310, 292, 323, 323, 292, 305, 349, 305, 
305, 336, 305, 318, 336, 318, 331, 287, 318, 
331, 287, 331, 344, 331, 300, 331, 313, 300, 
344, 313, 331, 313, 313, 344, 326, 375, 282, 
326, 295, 357, 295, 326, 326, 370, 295, 308, 
308, 352, 308, 383, 339, 321, 352, 370, 290, 
339, 321, 334, 321, 352, 321, 321, 334, 290, 
334, 303, 347, 334, 272, 334, 334, 347, 303, 
365, 316, 334, 254, 316, 329, 347, 329, 316, 
360, 329, 329, 347, 329, 342, 360, 298, 285, 
329, 329, 342, 311, 342, 311, 311, 355, 373, 
311, 311, 311, 342, 355, 355, 373, 293, 280, 
386, 324, 324, 355, 324, 355, 324, 324, 324, 
368, 368, 306, 355, 306, 443, 350, 337, 368, 
381, 306, 337, 350, 306, 350, 368, 275, 319, 
337, 275, 319, 332, 350, 288, 350, 332, 319, 
319, 332, 363, 288, 332, 345, 301, 345, 332, 
332, 301, 407, 332, 332, 314, 345, 270, 345, 
363, 283, 314, 358, 332, 345, 314, 389, 345, 
314, 345, 358, 314, 358, 358, 376, 314, 327, 
389, 345, 327, 327, 340, 358, 296, 358, 327, 
327, 371, 327, 371, 296, 340, 340, 340, 265, 
309, 309, 371, 340, 371, 309, 384, 340, 278, 
340, 353, 309, 353, 322, 371, 353, 309, 322, 
384, 340, 247, 322, 291, 353, 322, 291, 353, 
335, 322, 322, 366, 366, 335, 366, 304, 335, 
353, 335, 304, 441, 348, 322, 335, 366, 304, 
379, 335, 304, 348, 379, 348, 304, 379, 348, 
366, 348, 361, 317, 317, 361, 348, 286, 317, 
361, 392, 348, 317, 348, 330, 361, 423, 361, 
330, 361, 379, 374, 361, 330, 330, 348, 330, 
299, 330, 436, 361, 330, 299, 361, 405, 312, 
330, 330, 374, 299, 374, 387, 268, 343, 343, 
343, 361, 268, 312, 312, 449, 330, 343, 374, 
374, 312, 387, 343, 343, 281, 343, 325, 356, 
418, 356, 356, 356, 374, 294, 281, 312, 343, 
387, 343, 356, 281, 325, 387, 400, 356, 325, 
294, 356, 338, 325, 338, 325, 325, 369, 369, 
387, 307, 294, 369, 338, 338, 356, 338, 307, 
307, 307, 444, 369, 325, 338, 369, 369, 413, 
382, 338, 307, 276, 338, 307, 382, 320, 307, 
382, 351, 351, 351, 382, 351, 307, 320, 338, 
382, 338, 382, 351, 320, 320, 426, 395, 351, 
320, 320, 289, 351, 395, 364, 320, 426, 320, 
364, 364, 382, 364, 377, 364, 333, 470, 333, 
351, 364, 395, 302, 333, 439, 364, 333, 364, 
333, 302, 364, 408, 408, 377, 377, 333, 346, 
346, 377, 377, 346, 302, 333, 377, 346, 346, 
346, 364, 346, 359, 315, 346, 452, 377, 333, 
315, 346, 377, 315, 346, 421, 390, 346, 315, 
315, 284, 359, 328, 359, 328, 421, 328, 359, 
359, 359, 359, 377, 359, 372, 359, 328, 346, 
390, 372, 346, 359, 266, 328, 328, 434, 372, 
359, 359, 328, 315, 297, 359, 403, 328, 328, 
328, 328, 372, 372, 341, 372, 372, 403, 297, 
297, 372, 341, 328, 341, 341, 359, 341, 354, 
310, 310, 310, 447, 372, 372, 310, 341, 372, 
372, 310, 354, 385, 354, 341, 341, 279, 279, 
341, 310, 385, 354, 310, 416, 310, 354, 354, 
354, 354, 372, 416, 279, 279, 310, 323, 341, 
323, 385, 341, 336, 354, 385, 323, 385, 429, 
354, 398, 354, 323, 323, 292, 292, 367, 398, 
323, 367, 323, 292, 323, 323, 367, 336, 367, 
385, 336, 336, 380, 367, 336, 336, 305, 380, 
336, 354, 398, 367, 292, 336, 336, 442, 323, 
367, 367, 336, 336, 318, 367, 367, 367, 411, 
380, 349, 336, 380, 305, 349, 349, 336, 380, 
380, 411, 380, 305, 305, 380, 349, 336, 349, 
349, 367, 411, 349, 362, 305, 349, 318, 362, 
318, 380, 336, 380, 349, 349, 424, 318, 380, 
424, 424, 393, 318, 349, 318, 318, 349, 287, 
362, 318, 393, 362, 331, 318, 424, 318, 362, 
362, 331, 362, 362, 380, 362, 331, 375, 362, 
331, 331, 468, 331, 393, 349, 344, 393, 362, 
331, 437, 331, 393, 437, 362, 344, 362, 331, 
331, 313, 375, 300, 362, 406, 406, 375, 344, 
437, 375, 331, 331, 468, 344, 300, 375, 375, 
406, 388, 300, 331, 375, 344, 406, 331, 344, 
406, 287, 362, 375, 313, 357, 344, 344, 450, 
357, 450, 375, 331, 375, 326, 344, 313, 419, 
313, 375, 344, 419, 388, 357, 344, 313, 344, 
525, 344, 388, 357, 313, 388, 331, 357, 401, 
313, 419, 313, 357, 357, 357, 326, 357, 357, 
388, 375, 357, 370, 295, 357, 326, 326, 344, 
326, 388, 326, 344, 357, 388, 326, 432, 326, 
326, 388, 432, 370, 401, 326, 357, 326, 326, 
313, 370, 295, 370, 401, 401, 295, 370, 339, 
326, 295, 326, 370, 326, 370, 339, 370, 295, 
401, 401, 383, 295, 383, 295, 370, 326, 370, 
326, 476, 383, 401, 357, 370, 339, 339, 352, 
339, 432, 339, 339, 445, 308, 370, 339, 370, 
476, 383, 339, 370, 308, 370, 370, 414, 414, 
383, 352, 445, 339, 383, 339, 339, 352, 383, 
352, 383, 383, 383, 352, 414, 383, 414, 414, 
383, 339, 352, 352, 321, 352, 352, 352, 383, 
414, 352, 321, 365, 308, 321, 352, 458, 352, 
321, 383, 334, 339, 383, 334, 383, 334, 427, 
321, 383, 383, 352, 427, 352, 396, 321, 352, 
321, 321, 352, 290, 365, 365, 365, 352, 396, 396]
num_cache = [871, 1161, 2919, 3711, 4379, 5567, 6171, 7963, 8959, 
9257, 10971, 11945, 12342, 13255, 14695, 15039, 16457, 17647, 
18514, 19593, 20830, 21942, 22043, 23529, 24684, 25166, 26623, 
27135, 28313, 29257, 30078, 31419, 32415, 33019, 34239, 35655, 
36031, 37503, 38075, 39935, 40959, 41641, 42249, 43884, 44025, 
45127, 46443, 47329, 48927, 49575, 50815, 51359, 52527, 53483, 
54270, 55275, 56095, 57115, 58513, 59903, 60975, 61999, 62745, 
63387, 64255, 65511, 66038, 67691, 68187, 69535, 70335, 71310, 
72361, 73063, 74791, 75006, 76153, 77031, 78791, 79131, 80225, 
81159, 82665, 83503, 84143, 85673, 86175, 87087, 88059, 89119, 
90254, 91463, 92999, 93345, 94658, 95081, 96383, 97417, 98971, 
99067, 100167, 101537, 102281, 103666, 104617, 105054, 106239, 107065, 
108009, 109881, 110087, 111451, 112187, 113511, 114230, 115547, 116551, 
117511, 118187, 119017, 120338, 121950, 122815, 123391, 124327, 125383, 
126774, 127097, 128251, 129991, 130631, 131103, 132089, 133345, 134783, 
135111, 136374, 137195, 138351, 139489, 140073, 141759, 142587, 143007, 
144283, 145633, 146599, 147510, 148601, 149582, 150015, 151634, 152306, 
153422, 154062, 155401, 156159, 157582, 158433, 159359, 160411, 161895, 
162601, 163753, 164521, 165330, 166011, 167177, 168281, 169033, 170031, 
171001, 172350, 173321, 174174, 175531, 176118, 177281, 178075, 179375, 
180463, 181833, 182926, 183166, 184155, 185087, 186763, 187303, 188075, 
189855, 190161, 191559, 192711, 193115, 194987, 195465, 196655, 197942, 
198134, 199442, 200334, 201819, 202471, 203074, 204267, 205417, 206847, 
207175, 208623, 209223, 210108, 211051, 212478, 213881, 214130, 215177, 
216367, 217255, 218337, 219899, 220441, 221353, 222902, 223339, 224374, 
225023, 226587, 227047, 228399, 229791, 230631, 231094, 232233, 233191, 
234239, 235022, 236374, 237433, 238034, 239039, 240617, 241289, 242443, 
243900, 244911, 245630, 246782, 247387, 248654, 249017, 250363, 251257, 
252420, 253548, 254911, 255047, 256502, 257001, 258526, 259982, 260847, 
261262, 262206, 263103, 264178, 265922, 266689, 267113, 268028, 269083, 
270695, 271012, 272748, 273889, 274390, 275239, 276233, 277615, 278311, 
279023, 280145, 281401, 282113, 283305, 284783, 285174, 286747, 287339, 
288489, 289067, 290727, 291047, 292481, 293198, 294591, 295131, 296391, 
297202, 298843, 299164, 300030, 301265, 302719, 303707, 304001, 305035, 
306401, 307887, 308071, 309643, 310271, 311291, 312318, 313099, 314089, 
315164, 316577, 317378, 318718, 319467, 320822, 321003, 322591, 323199, 
324551, 325201, 326110, 327387, 328758, 329151, 330660, 331538, 332022, 
333817, 334354, 335009, 336199, 337535, 338065, 339881, 340571, 341671, 
342599, 343314, 344687, 345947, 346642, 347278, 348348, 349787, 350203, 
351359, 352236, 353065, 354303, 355143, 356150, 357052, 358063, 359967, 
360926, 361129, 362343, 363665, 364862, 365185, 366985, 367359, 368310, 
369567, 370153, 371081, 372030, 373526, 374606, 375201, 376603, 377739, 
378025, 379207, 380233, 381727, 382367, 383118, 384447, 385422, 386230, 
387753, 388062, 389191, 390930, 391271, 392135, 393511, 394655, 395263, 
396268, 397046, 398457, 399054, 400041, 401151, 402044, 403625, 404942, 
405334, 406043, 407177, 408534, 409124, 410011, 411586, 412857, 413694, 
414561, 415054, 416423, 417465, 418431, 419503, 420216, 421433, 422102, 
423679, 424956, 425503, 426651, 427762, 428260, 429019, 430121, 431899, 
432734, 433601, 434919, 435995, 436091, 437247, 438699, 439798, 440859, 
441887, 442697, 443977, 444587, 445089, 446678, 447801, 448265, 449479, 
450651, 451169, 452777, 453174, 454079, 455561, 456798, 457753, 458281, 
459559, 460007, 461262, 462107, 463036, 464415, 465407, 466382, 467739, 
468478, 469649, 470044, 471134, 472748, 473086, 474121, 475300, 476068, 
477417, 478078, 479931, 480395, 481959, 482239, 483887, 484615, 485887, 
486827, 487800, 488127, 489313, 490431, 491081, 492571, 493537, 494774, 
495195, 496041, 497308, 498034, 499647, 500271, 501063, 502137, 503777, 
504299, 505609, 506977, 507903, 508969, 509822, 510825, 511935, 512507, 
513897, 514671, 515239, 516903, 517417, 518921, 519871, 520683, 521241, 
522524, 523903, 524681, 525543, 526206, 527039, 528895, 529394, 530943, 
531455, 532715, 533387, 534225, 535580, 536319, 537095, 538166, 539922, 
540444, 541390, 542521, 543515, 544713, 545607, 546681, 547681, 548780, 
549804, 550478, 551593, 552466, 553631, 554143, 555230, 556622, 557089, 
558046, 559337, 560295, 561910, 562802, 563318, 564905, 565151, 566609, 
567337, 568807, 569566, 570348, 571551, 572591, 573551, 574678, 575865, 
576978, 577081, 578134, 579007, 580967, 581454, 582094, 583787, 584007, 
585327, 586396, 587841, 588543, 589182, 590262, 591983, 592782, 593023, 
594404, 595570, 596415, 597686, 598255, 599305, 600060, 601327, 602530, 
603702, 604233, 605438, 606183, 607414, 608002, 609063, 610215, 611455, 
612745, 613319, 614059, 615017, 616142, 617767, 618532, 619286, 620542, 
621842, 622183, 623643, 624635, 625206, 626198, 627647, 628127, 629255, 
630328, 631161, 632161, 633154, 634159, 635519, 636897, 637436, 638255, 
639913, 640047, 641644, 642075, 643436, 644681, 645182, 646153, 647849, 
648642, 649051, 650402, 651335, 652379, 653739, 654137, 655871, 656761, 
657903, 658049, 659698, 660265, 661281, 662831, 663076, 664063, 665979, 
666111, 667375, 668708, 669054, 670018, 671023, 672398, 673115, 674145, 
675969, 676129, 677865, 678625, 679762, 680095, 681099, 682023, 683947, 
684004, 685195, 686985, 687279, 688977, 689131, 690057, 691894, 692895, 
693161, 694987, 695593, 696623, 697371, 698111, 699574, 700385, 701607, 
702715, 703358, 704472, 705193, 706129, 707995, 708606, 709124, 710286, 
711182, 712683, 713575, 714104, 715433, 716126, 717118, 718439, 719897, 
720593, 721852, 722335, 723359, 724686, 725831, 726811, 727199, 728859, 
729705, 730183, 731704, 732191, 733927, 734043, 735679, 736367, 737371, 
738857, 739143, 740306, 741231, 742162, 743531, 744060, 745711, 746431, 
747519, 748086, 749227, 750402, 751090, 752300, 753206, 754843, 755478, 
756449, 757167, 758409, 759420, 760465, 761855, 762599, 763454, 764734, 
765567, 766191, 767903, 768761, 769305, 770844, 771004, 772859, 773247, 
774559, 775035, 776124, 777327, 778382, 779742, 780135, 781860, 782535, 
783739, 784543, 785691, 786345, 787017, 788315, 789310, 790555, 791279, 
792735, 793343, 794092, 795295, 796095, 797183, 798108, 799023, 800081, 
801769, 802302, 803372, 804479, 805643, 806759, 807327, 808274, 809884, 
810399, 811241, 812086, 813307, 814719, 815273, 816747, 817663, 818943, 
819967, 820022, 821522, 822895, 823689, 824347, 825627, 826395, 827503, 
828681, 829119, 830447, 831215, 832839, 833609, 834930, 835633, 836862, 
837799, 838683, 839547, 840443, 841041, 842881, 843129, 844204, 845223, 
846340, 847358, 848923, 849912, 850433, 851006, 852075, 853211, 854034, 
855583, 856551, 857313, 858887, 859295, 860327, 861537, 862018, 863798, 
864559, 865401, 866011, 867202, 868511, 869467, 870427, 871915, 872182, 
873033, 874494, 875681, 876011, 877398, 878654, 879596, 880347, 881707, 
882815, 883903, 884100, 885417, 886855, 887975, 888425, 889371, 890178, 
891608, 892073, 893356, 894623, 895602, 896530, 897383, 898855, 899070, 
900735, 901991, 902591, 903792, 904833, 905554, 906348, 907129, 908319, 
909275, 910107, 911929, 912511, 913593, 914971, 915323, 916295, 917183, 
918841, 919791, 920071, 921447, 922524, 923239, 924139, 925659, 926649, 
927003, 928191, 929081, 930814, 931382, 932764, 933846, 934299, 935478, 
936953, 937810, 938143, 939298, 940257, 941145, 942571, 943899, 944491, 
945403, 946623, 947049, 948242, 949732, 950943, 951433, 952479, 953279, 
954834, 955657, 956156, 957383, 958290, 959862, 960071, 961145, 962631, 
963113, 964287, 965595, 966249, 967215, 968095, 969081, 970599, 971247, 
972939, 973577, 974751, 975600, 976254, 977003, 978151, 979547, 980905, 
981206, 982663, 983161, 984233, 985142, 986855, 987074, 988487, 989547, 
990379, 991374, 992895, 993183, 994395, 995967, 996095, 997231, 998969, 999294]


# ------------
# collatz_read
# ------------

def collatz_read (r, a) :
    """
    reads two ints into a[0] and a[1]
    r is a  reader
    a is an array of int
    return true if that succeeds, false otherwise
    """
    s = r.readline()
    if s == "" :
        return False
    l = s.split()
    a[0] = int(l[0])
    a[1] = int(l[1])
    assert a[0] > 0
    assert a[1] > 0
    return True

# ------------
# collatz_eval
# ------------

def collatz_eval (i, j) :
    """
    i is the beginning of the range, inclusive
    j is the end       of the range, inclusive
    return the max cycle length in the range [i, j]
    """
    assert i > 0
    assert j > 0

    v = 1
    if(i > j):
        temp = j
        j = i
        i = temp

    assert i <= j

    index_a = i//1000
    index_b = j//1000
    if((i<=num_cache[index_a]) and (j>=num_cache[index_b])):
	    temp = cycle_cache[index_a]
	    for x in range(index_a+1, index_b):
	        if(temp < cycle_cache[x]):
		        temp = cycle_cache[x]
	    return temp

    if(i <= j/2):
	    i = j/2 + 1
    
    for x in range(i, j):
	    y = x
	    curr_length = 1
	    while (y > 1):
	        if(y%2 == 0) :
	    	    y = y >> 1 
	    	    curr_length += 1	    
	        else:
	            y += (y >> 1) + 1
	    	    curr_length += 2		    
	    if(curr_length > v):
	        v = curr_length

    assert v > 0
    return v

# -------------
# collatz_print
# -------------

def collatz_print (w, i, j, v) :
    """
    prints the values of i, j, and v
    w is a writer
    i is the beginning of the range, inclusive
    j is the end       of the range, inclusive
    v is the max cycle length
    """
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")

# -------------
# collatz_solve
# -------------

def collatz_solve (r, w) :
    """
    read, eval, print loop
    r is a reader
    w is a writer
    """
    a = [0, 0]
    while collatz_read(r, a) :
        v = collatz_eval(a[0], a[1])
        collatz_print(w, a[0], a[1], v)

# -------
# imports
# -------

import sys

# ----
# main
# ----

collatz_solve(sys.stdin, sys.stdout)
